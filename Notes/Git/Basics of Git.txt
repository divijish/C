1. For every project you need to maintain a repository.
2. ReadMe is the first file that is created.
3. gitignore consists of files that you want to ignore while making push or pull. Like log files.
4. First go to a folder of which you want to commit files.
5. Then use command 'git init' to initialize this folder as your local repository.
6. Eg. If you have files
		Eg1.txt and Eg2.txt in folder FolderExp in your local machine and you want to upload it to repository named MyRepository then go to folder FolderExp and use command git init.

7. Then use command : git remote add origin "URL of UserName/MyRepository"
8. This will associate your local repository to github repository.
9. Now use command 'git status' to check the status of your index. Index behaves as interface between your workspace 	and local repository. So whatever is not added in index but is present in your workspace it can be seen using git 	 status. The below example shows that whatever is not present in index is pointed out in :git status:
   \*

  Changes not staged for commit:

  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   Notes/Git/Basics of Git.txt 
  
        *\
10. Use command "git add ." to add all the files to index or use git add "File names" to add particular files.
	Command "git add -A" can also be used to add all the files at once.
11. If a folder is empty and newly added then it will not be added to index.
12. Once files are added to index then they can be Commited to local repository using command
	"git commit -m 'Adding commit to the local repository' "
13. You can also use command "git commit -a -m 'Message'" to commit all files directly without having to use "git add ." command first.
14. To commit all the files together at once in local repository use command "git commit -a".


Branches

1. There are 2 types of branches: Local repository branches(on local repository) and remote-tracking branches(on github repository).
2. To create branch at local repository use command : git branch "branch name"
3. Use command "git checkout branchName" to switch from one branch to another.
4. Whatever you commit to one branch is not visible to another branch unless you commit the same in that branch too.
5. You have to do that again on second branch and then commit to it to see that change.
6. Observation: If you are in one branch then entire directory structure of your folder changes to the one which is in that particular branch. 


Merging

1. Checkout to the branch that you want the code to merge to. Eg. if your production code is in master branch and you want to include extra code from another branch then checkout to master branch first.
2. commit the changes that you have done in your commit branch first otherwise you won't be able to merge.
3. use command "git merge firstBranch" if you want to merge the contents of firstBranch to master.

Rebasing

1. Used to put history of one branch on top of another.

SSH key generation

1. Use command ssh-keygen. Leave the passphrase blank.
2. Then copy the entire key starting from ssh-
3. Go to settings of your github account and click on 'SSH and GPG keys'.
4. The click on add new key. give a name to ssh title.
5. Paste the key generated from your git bash here. Save it.
